import { useState, useEffect } from 'react';
import { groupAPI } from '../services/api';
import GroupForm from './GroupForm';
import GroupItem from './GroupItem';
import useSmartRefresh from '../hooks/useSmartRefresh';

const GroupList = () => {
  const [groups, setGroups] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [editingGroup, setEditingGroup] = useState(null);
  const [showForm, setShowForm] = useState(false);

  // –ó–∞–≥—Ä—É–∑–∏—Ç—å –≤—Å–µ –≥—Ä—É–ø–ø—ã
  const fetchGroups = async () => {
    try {
      setLoading(true);
      const response = await groupAPI.getAll();
      setGroups(response.data);
      setError(null);
    } catch (err) {
      setError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≥—Ä—É–ø–ø');
      console.error('Error fetching groups:', err);
    } finally {
      setLoading(false);
    }
  };

  // –£–º–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å SSE
  const { refreshNow, isRefreshing, isConnected, lastUpdate, updateCount } = useSmartRefresh(
    null, // –¥–µ—Ç–∞–ª–∏ –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ
    fetchGroups,
    60000 // fallback –∏–Ω—Ç–µ—Ä–≤–∞–ª 1 –º–∏–Ω—É—Ç–∞
  );

  // –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –≥—Ä—É–ø–ø—É
  const handleCreate = async (groupData) => {
    try {
      const response = await groupAPI.create(groupData);
      setGroups([...groups, response.data]);
      setShowForm(false);
      setError(null);
    } catch (err) {
      setError('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≥—Ä—É–ø–ø—ã');
      console.error('Error creating group:', err);
    }
  };

  // –û–±–Ω–æ–≤–∏—Ç—å –≥—Ä—É–ø–ø—É
  const handleUpdate = async (id, groupData) => {
    try {
      const response = await groupAPI.update(id, groupData);
      setGroups(groups.map(group => 
        group.id === id ? response.data : group
      ));
      setEditingGroup(null);
      setError(null);
    } catch (err) {
      setError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≥—Ä—É–ø–ø—ã');
      console.error('Error updating group:', err);
    }
  };

  // –£–¥–∞–ª–∏—Ç—å –≥—Ä—É–ø–ø—É
  const handleDelete = async (id) => {
    if (window.confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É –≥—Ä—É–ø–ø—É? –í—Å–µ –¥–µ—Ç–∞–ª–∏ –≤ –≥—Ä—É–ø–ø–µ –±—É–¥—É—Ç –ø–µ—Ä–µ–º–µ—â–µ–Ω—ã –≤ "–ë–µ–∑ –≥—Ä—É–ø–ø—ã".')) {
      try {
        await groupAPI.delete(id);
        setGroups(groups.filter(group => group.id !== id));
        setError(null);
      } catch (err) {
        setError('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≥—Ä—É–ø–ø—ã');
        console.error('Error deleting group:', err);
      }
    }
  };

  // –ù–∞—á–∞—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
  const handleEdit = (group) => {
    setEditingGroup(group);
    setShowForm(false);
  };

  // –û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
  const handleCancelEdit = () => {
    setEditingGroup(null);
  };

  useEffect(() => {
    fetchGroups();
  }, []);

  if (loading) {
    return <div className="loading">–ó–∞–≥—Ä—É–∑–∫–∞ –≥—Ä—É–ø–ø...</div>;
  }

  return (
    <div className="group-list">
      <div className="header">
        <h2>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø–∞–º–∏</h2>
        <div className="header-actions">
          <div className="refresh-status">
            {isRefreshing && (
              <span className="refresh-indicator">
                üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ...
              </span>
            )}
            {isConnected && !isRefreshing && (
              <span className="connected-indicator">
                üü¢ –†–µ–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è
              </span>
            )}
            {!isConnected && !isRefreshing && (
              <span className="disconnected-indicator">
                üü° –û–±—ã—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
              </span>
            )}
            {lastUpdate && (
              <span className="last-update">
                –û–±–Ω–æ–≤–ª–µ–Ω–æ: {lastUpdate.toLocaleTimeString()}
              </span>
            )}
          </div>
          <button 
            className="btn btn-secondary"
            onClick={refreshNow}
            disabled={isRefreshing}
            title="–û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ"
          >
            {isRefreshing ? 'üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ...' : 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å'}
          </button>
          <button 
            className="btn btn-primary"
            onClick={() => setShowForm(true)}
          >
            –î–æ–±–∞–≤–∏—Ç—å –≥—Ä—É–ø–ø—É
          </button>
        </div>
      </div>

      {error && (
        <div className="error-message">
          {error}
        </div>
      )}

      {showForm && (
        <GroupForm
          onSubmit={handleCreate}
          onCancel={() => setShowForm(false)}
        />
      )}

      {editingGroup && (
        <GroupForm
          group={editingGroup}
          onSubmit={(data) => handleUpdate(editingGroup.id, data)}
          onCancel={handleCancelEdit}
        />
      )}

      <div className="groups-grid">
        {groups.length === 0 ? (
          <div className="no-data">
            –ì—Ä—É–ø–ø—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—É—é –≥—Ä—É–ø–ø—É!
          </div>
        ) : (
          groups.map(group => (
            <GroupItem
              key={group.id}
              group={group}
              onEdit={handleEdit}
              onDelete={handleDelete}
            />
          ))
        )}
      </div>
    </div>
  );
};

export default GroupList;
